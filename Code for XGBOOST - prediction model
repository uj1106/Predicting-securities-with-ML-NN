{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# --- Step 0: Install Required Libraries ---\n",
        "# This cell ensures that all necessary packages are installed before we start.\n",
        "# pandas-ta has been removed as we are now calculating indicators manually.\n",
        "!pip install pandas numpy arch scikit-learn xgboost optuna optuna-integration[xgboost] --quiet\n",
        "\n",
        "\n",
        "# --- Now we can import the libraries for use in the script ---\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from arch import arch_model\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import accuracy_score # Import accuracy_score\n",
        "import optuna\n",
        "from optuna.integration import XGBoostPruningCallback\n",
        "import warnings\n",
        "\n",
        "# Suppress verbose warnings for a cleaner output\n",
        "warnings.filterwarnings('ignore')\n",
        "optuna.logging.set_verbosity(optuna.logging.WARNING)\n",
        "\n",
        "\n",
        "# --- New Manual Functions for Technical Indicators ---\n",
        "\n",
        "def calculate_rsi(series, length=14):\n",
        "    \"\"\"Calculates the Relative Strength Index (RSI).\"\"\"\n",
        "    delta = series.diff()\n",
        "    gain = (delta.where(delta > 0, 0)).rolling(window=length).mean()\n",
        "    loss = (-delta.where(delta < 0, 0)).rolling(window=length).mean()\n",
        "    rs = gain / loss\n",
        "    return 100 - (100 / (1 + rs))\n",
        "\n",
        "def calculate_macd(series, fast=12, slow=26, signal=9):\n",
        "    \"\"\"Calculates the Moving Average Convergence Divergence (MACD).\"\"\"\n",
        "    ema_fast = series.ewm(span=fast, adjust=False).mean()\n",
        "    ema_slow = series.ewm(span=slow, adjust=False).mean()\n",
        "    macd_line = ema_fast - ema_slow\n",
        "    signal_line = macd_line.ewm(span=signal, adjust=False).mean()\n",
        "    return macd_line, signal_line\n",
        "\n",
        "def calculate_bollinger_bands(series, length=20, std_dev=2):\n",
        "    \"\"\"Calculates Bollinger Bands.\"\"\"\n",
        "    middle_band = series.rolling(window=length).mean()\n",
        "    std = series.rolling(window=length).std()\n",
        "    upper_band = middle_band + (std * std_dev)\n",
        "    lower_band = middle_band - (std * std_dev)\n",
        "    return upper_band, lower_band\n",
        "\n",
        "def calculate_atr(high, low, close, length=14):\n",
        "    \"\"\"Calculates the Average True Range (ATR).\"\"\"\n",
        "    high_low = high - low\n",
        "    high_close = np.abs(high - close.shift())\n",
        "    low_close = np.abs(low - close.shift())\n",
        "    tr = pd.DataFrame({'hl': high_low, 'hc': high_close, 'lc': low_close}).max(axis=1)\n",
        "    return tr.ewm(alpha=1/length, adjust=False).mean()\n",
        "\n",
        "def frac_diff(series, d, threshold=1e-5):\n",
        "    \"\"\"Computes fractional differencing for a time series.\"\"\"\n",
        "    weights = [1.]\n",
        "    k = 1\n",
        "    while True:\n",
        "        weight = -weights[-1] * (d - k + 1) / k\n",
        "        if abs(weight) < threshold:\n",
        "            break\n",
        "        weights.append(weight)\n",
        "        k += 1\n",
        "    weights = np.array(weights[::-1])\n",
        "    differenced_series = []\n",
        "    for i in range(len(weights), len(series)):\n",
        "        window = series.iloc[i-len(weights):i]\n",
        "        differenced_value = np.dot(weights, window)\n",
        "        differenced_series.append(differenced_value)\n",
        "    return pd.Series(differenced_series, index=series.index[len(weights):])\n",
        "\n",
        "\n",
        "# --- 1. Data Loading (REPLACE THE SIMULATION BELOW) ---\n",
        "# This is the section you need to modify.\n",
        "# The simulation below is a placeholder. You should comment it out\n",
        "# and un-comment the \"Load Real Data\" section, providing your own CSV files.\n",
        "\n",
        "# --- Start of Data Simulation Block (DELETE OR COMMENT OUT) ---\n",
        "# print(\"Step 1: Simulating market data (Nifty, VIX, Macros)...\")\n",
        "# np.random.seed(42)\n",
        "# date_rng = pd.date_range(start='2020-01-01', end='2024-12-31', freq='B')\n",
        "# n_days = len(date_rng)\n",
        "# price_trend = np.linspace(12000, 18000, n_days)\n",
        "# price_random_walk = np.random.randn(n_days).cumsum() * 50\n",
        "# close_price = price_trend + price_random_walk\n",
        "# df = pd.DataFrame(date_rng, columns=['Date'])\n",
        "# df.set_index('Date', inplace=True)\n",
        "# df['Close'] = close_price\n",
        "# df['High'] = df['High'] + np.random.uniform(0, 50, n_days)\n",
        "# df['Low'] = df['Low'] - np.random.uniform(0, 50, n_days)\n",
        "# df['Volume'] = np.random.randint(200_000, 800_000, n_days)\n",
        "# # Simulate an interest rate that changes only occasionally\n",
        "# ir_changes = np.random.choice([0, 0.25, -0.25], size=n_days, p=[0.98, 0.01, 0.01]).cumsum()\n",
        "# df['Interest_Rate'] = 6.50 + ir_changes\n",
        "# df['USD_INR'] = 80 + np.cos(np.arange(n_days) / 50) * 3\n",
        "# df['India_VIX'] = np.random.uniform(12, 25, n_days) + np.sin(np.arange(n_days)/20) * 5\n",
        "# # --- End of Data Simulation Block ---\n",
        "\n",
        "\n",
        "# --- Start of Real Data Loading Block (UN-COMMENT AND USE) ---\n",
        "# print(\"Step 1: Loading and merging real-world data...\")\n",
        "# # # 1. Market Data: Download from yfinance or load your own CSV.\n",
        "# # # Your CSV must contain these columns: 'Date', 'Close', 'High', 'Low', 'Volume'\n",
        "# import yfinance as yf\n",
        "# import pandas as pd # Ensure pandas is imported\n",
        "#\n",
        "# market_data = yf.download('^NSEI', start='2019-01-01', end='2024-12-31')\n",
        "#\n",
        "# # Drop the extra level from the market_data columns\n",
        "# market_data.columns = market_data.columns.droplevel(level=1)\n",
        "#\n",
        "#\n",
        "# # # 3. Macro Data: A CSV you create yourself.\n",
        "# # # Must contain 'Date', 'Interest_Rate', 'USD_INR'\n",
        "# vix_macro_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/REPO.csv', parse_dates=['Date'], index_col='Date')\n",
        "#\n",
        "# # Add this line to print the columns\n",
        "# print(\"Columns in vix_macro_data:\", vix_macro_data.columns)\n",
        "#\n",
        "# # Print shapes before join\n",
        "# print(\"Shape of market_data before join:\", market_data.shape)\n",
        "# print(\"Shape of vix_macro_data before join (selected columns):\", vix_macro_data[['VIX','USD_INR','Interest_rate']].shape)\n",
        "#\n",
        "# # # 4. Combine all data into a single DataFrame\n",
        "# df = market_data.join(vix_macro_data[['VIX','USD_INR','Interest_rate']], how='inner')\n",
        "#\n",
        "# # Convert 'Interest_rate' to numeric, coercing errors to NaN\n",
        "# df['Interest_rate'] = pd.to_numeric(df['Interest_rate'], errors='coerce')\n",
        "#\n",
        "#\n",
        "# # Print shape after join\n",
        "# print(\"Shape of df after inner join:\", df.shape)\n",
        "#\n",
        "# # # 5. Keep only the columns we need for feature engineering\n",
        "# df = df[['Close', 'High', 'Low', 'Volume', 'VIX', 'Interest_rate', 'USD_INR']]\n",
        "#\n",
        "# print(\"Data loading complete. Sample:\")\n",
        "# print(df.head())\n",
        "#\n",
        "# --- End of Real Data Loading Block ---\n",
        "\n",
        "\n",
        "# --- 2. Advanced Feature Engineering ---\n",
        "print(\"Step 2: Performing advanced feature engineering...\")\n",
        "\n",
        "def create_advanced_features(data):\n",
        "    \"\"\"Creates a rich feature set from the base data.\"\"\"\n",
        "    df = data.copy()\n",
        "\n",
        "    # Add print statement to check columns at the start of the function\n",
        "    print(\"\\nColumns in DataFrame passed to create_advanced_features:\", df.columns.tolist())\n",
        "\n"
        "    # Convert 'Interest_rate' to numeric, removing '%' and handling errors\n",
        "    df['Interest_rate'] = df['Interest_rate'].astype(str).str.replace('%', '', regex=False)\n",
        "    df['Interest_rate'] = pd.to_numeric(df['Interest_rate'], errors='coerce')\n",
        "\n",
        "\n",
        "    # Manually calculate and add technical indicators\n",
        "    df['RSI'] = calculate_rsi(df['Close'])\n",
        "    df['MACD'], df['MACD_Signal'] = calculate_macd(df['Close'])\n",
        "    df['BB_Upper'], df['BB_Lower'] = calculate_bollinger_bands(df['Close'])\n",
        "    df['ATR'] = calculate_atr(df['High'], df['Low'], df['Close'])\n",
        "\n",
  
        "\n"
        "    # Fractional Differentiation\n",
        "    df['FracDiff_Close'] = frac_diff(df['Close'], 0.5)\n",
        "    df['Hist_Volatility_30D'] = df['Close'].pct_change().rolling(window=30).std() * 100\n",
        "\n",
        "    # Lag features\n",
        "    for lag in [1, 3, 5, 10]:\n",
        "        df[f'Close_Lag_{lag}'] = df['Close'].shift(lag)\n",
        "        # Removed VIX lag feature calculation since 'Price_vix' is dropped\n",
        "        # df[f'VIX_Lag_{lag}'] = df['Price_vix'].shift(lag)\n",
        "\n",
        "\n",
        "    # --- NEW: Features to capture longer-term macro effects ---\n",
        "    # Use 'Interest_rate' with lowercase 'r'\n",
        "    df['Rate_Change'] = df['Interest_rate'].diff()\n",
        "    df['Days_Since_Rate_Change'] = df['Rate_Change'].ne(0).cumsum()\n",
        "    df['Days_Since_Rate_Change'] = df.groupby('Days_Since_Rate_Change').cumcount()\n",
        "\n",
        "    # Use 'Interest_rate' with lowercase 'r'\n",
        "    df['Rate_MA30'] = df['Interest_rate'].rolling(window=30).mean()\n",
        "    # Use 'Price_usd_inr' as the column name for FX MA30\n",
        "    df['FX_MA30'] = df['Price_usd_inr'].rolling(window=30).mean()\n",
        "    # --- END NEW FEATURES ---\n",
        "\n",
        "    # --- KEY CHANGE: Create a binary target for classification ---\n",
        "    # 1 if the price goes up tomorrow, 0 otherwise\n",
        "    df['target'] = (df['Close'].shift(-1) > df['Close']).astype(int)\n",
        "\n",
        "\n",
        "    print(\"\\nShape before dropna:\", df.shape)\n",
        "    print(\"Info before dropna:\")\n",
        "    df.info()\n",
        "    print(\"\\nHead before dropna:\")\n",
        "    display(df.head())\n",
        "    print(\"\\nTail before dropna:\")\n",
        "    display(df.tail())\n",
        "\n",
        "\n",
        "    # Handle missing values using forward fill before dropping remaining NaNs\n",
        "    df.fillna(method='ffill', inplace=True)\n",
        "    # df.dropna(inplace=True) # Removed as requested\n",
        "\n",
        "    print(\"\\nShape after fillna:\", df.shape) # Changed print statement\n",
        "    print(\"Info after fillna:\") # Changed print statement\n",
        "    df.info()\n",
        "\n",
        "    return df\n",
        "\n",
        "# Assuming 'df' is your initial DataFrame after loading and basic cleaning\n",
        "# (the part you marked for replacement with real data loading)\n",
        "# If you uncomment the real data loading block, ensure 'df' is assigned correctly there.\n",
        "\n",
        "# For now, using the 'df' variable that was loaded in a previous execution\n",
        "# You should ensure 'df' is correctly loaded from your data source before this point.\n",
        "\n",
        "\n",
        "featured_df = create_advanced_features(df)\n",
        "\n",
        "\n",
        "# --- 3. Optuna Objective Function for Hyperparameter Tuning ---\n",
        "# Drop non-feature columns before defining X and y\n",
        "# Keep 'Close' in X for directional accuracy calculation\n",
        "X = featured_df.drop(['target', 'High', 'Low'], axis=1, errors='ignore')\n",
        "# --- KEY CHANGE: y is now the binary target ---\n",
        "y = featured_df['target']\n",
        "\n",
        "def objective(trial):\n",
        "    \"\"\"Defines a trial for Optuna to minimize RMSE.\"\"\"\n",
        "    # --- KEY CHANGE: Use parameters suitable for XGBClassifier ---\n",
        "    params = {\n",
        "        # --- KEY CHANGE: Use binary:logistic for classification ---\n",
        "        'objective': 'binary:logistic',\n",
        "        'eval_metric': 'logloss', # Use logloss for binary classification\n",
        "\n",
        "        'n_estimators': trial.suggest_int('n_estimators', 500, 2000, step=100),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3), # Adjusted range for classification\n",
        "        'max_depth': trial.suggest_int('max_depth', 3, 8),\n",
        "        'subsample': trial.suggest_float('subsample', 0.6, 1.0), # Adjusted range for classification\n",
        "        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0), # Adjusted range for classification\n",
        "        'gamma': trial.suggest_float('gamma', 0, 5),\n",
        "        # lambda and alpha are also available in XGBClassifier, but let's keep it simpler for now\n",
        "        # 'lambda': trial.suggest_float('lambda', 1, 10), # L2 regularization\n",
        "        # 'alpha': trial.suggest_float('alpha', 0, 10), # L1 regularization\n",
        "        'random_state': 42,\n",
        "        'n_jobs': -1\n",
        "    }\n",
        "\n",
        "    n_splits = 5\n",
        "    tscv = TimeSeriesSplit(n_splits=n_splits)\n",
        "    # --- KEY CHANGE: Store accuracies for classification ---\n",
        "    fold_accuracies = []\n",
        "\n",
        "\n",
        "    for fold, (train_index, test_index) in enumerate(tscv.split(X)):\n",
        "        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
        "        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "        # Handle potential NaNs in X_train and X_test before scaling\n",
        "        X_train_filled = X_train.fillna(method='ffill').fillna(method='bfill')\n",
        "        X_test_filled = X_test.fillna(method='ffill').fillna(method='bfill')\n",
        "\n",
        "        scaler = MinMaxScaler()\n",
        "        # Scale all features\n",
        "        X_train_scaled = scaler.fit_transform(X_train_filled)\n",
        "        X_test_scaled = scaler.transform(X_test_filled)\n",
        "\n",
        "        # Create DMatrix is not needed for XGBClassifier.fit()\n",
        "\n",
        "        # --- KEY CHANGE: Instantiate XGBClassifier ---\n",
        "        model = xgb.XGBClassifier(**params)\n",
        "\n",
        "        # --- KEY CHANGE: Removed early_stopping_rounds to bypass persistent error ---\n",
        "        # --- KEY CHANGE: Removed callbacks to bypass persistent error ---\n",
        "        model.fit(X_train_scaled, y_train,\n",
        "                  eval_set=[(X_test_scaled, y_test)],\n",
        "                  verbose=False) # Removed callbacks and early_stopping_rounds\n",
        "\n",
        "        # --- KEY CHANGE: Get predictions (probabilities for binary classification) ---\n",
        "        # Predict probabilities for the positive class (class 1)\n",
        "        predictions_proba = model.predict_proba(X_test_scaled)[:, 1]\n",
        "\n",
        "        # --- KEY CHANGE: Convert probabilities to class labels (0 or 1) ---\n",
        "        # You can choose a threshold, 0.5 is standard\n",
        "        predictions = (predictions_proba > 0.5).astype(int)\n",
        "\n",
        "        # --- KEY CHANGE: Calculate ACCURACY for classification ---\n",
        "        accuracy = accuracy_score(y_test, predictions)\n",
        "        fold_accuracies.append(accuracy)\n",
        "\n",
        "\n",
        "    # Optuna maximizes the objective for accuracy\n",
        "    average_accuracy = np.mean(fold_accuracies)\n",
        "\n",
        "    return average_accuracy\n",
        "\n",
        "\n",
        "# --- 4. Run the Optuna Study ---\n",
        "print(\"\\nStep 3: Starting Optuna study to MAXIMIZE prediction accuracy...\")\n",
        "# --- KEY CHANGE: Direction is now 'maximize' for accuracy ---\n",
        "study = optuna.create_study(direction='maximize', pruner=optuna.pruners.MedianPruner(n_warmup_steps=5))\n",
        "study.optimize(objective, n_trials=50, show_progress_bar=True) # Increased trials slightly for classification\n",
        "\n",
        "\n",
        "# --- 5. Review the Results ---\n",
        "print(\"\\n--- Optimization Complete ---\")\n",
        "print(f\"Number of finished trials: {len(study.trials)}\")\n",
        "best_trial = study.best_trial\n",
        "# --- KEY CHANGE: Print accuracy instead of RMSE ---\n",
        "print(f\"\\nBest trial average ACCURACY: {best_trial.value:.4f}\")\n",
        "print(\"(Note: An accuracy of 0.50 is equivalent to a random coin flip)\")\n",
        "\n",
        "print(\"\\nBest Hyperparameters Found:\")\n",
        "for key, value in best_trial.params.items():\n",
        "    print(f\"  {key}: {value}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Step 2: Performing advanced feature engineering...\n",
            "\n",
            "Columns in DataFrame passed to create_advanced_features: ['Close', 'High', 'Low', 'Open', 'Volume', 'Price_vix', 'Interest_rate', 'Price_usd_inr', 'GARCH_Volatility']\n",
            "\n",
            "Returns series length for GARCH: 1476\n",
            "Returns series head:\n",
            "Date\n",
            "2019-01-03   -1.114200\n",
            "2019-01-04    0.516289\n",
            "2019-01-07    0.414363\n",
            "2019-01-08    0.281760\n",
            "2019-01-09    0.490643\n",
            "Name: Close, dtype: float64\n",
            "Returns series tail:\n",
            "Date\n",
            "2024-12-23    0.703547\n",
            "2024-12-24   -0.108611\n",
            "2024-12-26    0.095032\n",
            "2024-12-27    0.266108\n",
            "2024-12-30   -0.707585\n",
            "Name: Close, dtype: float64\n",
            "Number of NaNs in returns series: 0\n",
            "Number of zero values in returns series: 1\n",
            "GARCH forecast added. First few values:\n",
            "Series([], Name: GARCH_Volatility, dtype: float64)\n",
            "Number of NaNs in GARCH_Volatility after calculation: 1477\n",
            "\n",
            "Shape before dropna: (1477, 26)\n",
            "Info before dropna:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 1477 entries, 2019-01-02 to 2024-12-30\n",
            "Data columns (total 26 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Close                   1477 non-null   float64\n",
            " 1   High                    1477 non-null   float64\n",
            " 2   Low                     1477 non-null   float64\n",
            " 3   Open                    1477 non-null   float64\n",
            " 4   Volume                  1477 non-null   int64  \n",
            " 5   Price_vix               1477 non-null   float64\n",
            " 6   Interest_rate           1477 non-null   float64\n",
            " 7   Price_usd_inr           1477 non-null   float64\n",
            " 8   GARCH_Volatility        0 non-null      float64\n",
            " 9   RSI                     1464 non-null   float64\n",
            " 10  MACD                    1477 non-null   float64\n",
            " 11  MACD_Signal             1477 non-null   float64\n",
            " 12  BB_Upper                1458 non-null   float64\n",
            " 13  BB_Lower                1458 non-null   float64\n",
            " 14  ATR                     1477 non-null   float64\n",
            " 15  FracDiff_Close          550 non-null    float64\n",
            " 16  Hist_Volatility_30D     1447 non-null   float64\n",
            " 17  Close_Lag_1             1476 non-null   float64\n",
            " 18  Close_Lag_3             1474 non-null   float64\n",
            " 19  Close_Lag_5             1472 non-null   float64\n",
            " 20  Close_Lag_10            1467 non-null   float64\n",
            " 21  Rate_Change             1476 non-null   float64\n",
            " 22  Days_Since_Rate_Change  1477 non-null   int64  \n",
            " 23  Rate_MA30               1448 non-null   float64\n",
            " 24  FX_MA30                 1448 non-null   float64\n",
            " 25  target                  1477 non-null   int64  \n",
            "dtypes: float64(23), int64(3)\n",
            "memory usage: 311.6 KB\n",
            "\n",
            "Head before dropna:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                   Close          High           Low          Open  Volume  \\\n",
              "Date                                                                         \n",
              "2019-01-02  10792.500000  10895.349609  10735.049805  10868.849609  309700   \n",
              "2019-01-03  10672.250000  10814.049805  10661.250000  10796.799805  286200   \n",
              "2019-01-04  10727.349609  10741.049805  10628.650391  10699.700195  296600   \n",
              "2019-01-07  10771.799805  10835.950195  10750.150391  10804.849609  269400   \n",
              "2019-01-08  10802.150391  10818.450195  10733.250000  10786.250000  277700   \n",
              "\n",
              "            Price_vix  Interest_rate  Price_usd_inr  GARCH_Volatility  RSI  \\\n",
              "Date                                                                         \n",
              "2019-01-02    16.3875            6.5         71.435               NaN  NaN   \n",
              "2019-01-03    16.7900            6.5         71.000               NaN  NaN   \n",
              "2019-01-04    16.1625            6.5         69.205               NaN  NaN   \n",
              "2019-01-07    16.3025            6.5         68.885               NaN  NaN   \n",
              "2019-01-08    15.7000            6.5         69.017               NaN  NaN   \n",
              "\n",
              "            ...  Hist_Volatility_30D   Close_Lag_1  Close_Lag_3  Close_Lag_5  \\\n",
              "Date        ...                                                                \n",
              "2019-01-02  ...                  NaN           NaN          NaN          NaN   \n",
              "2019-01-03  ...                  NaN  10792.500000          NaN          NaN   \n",
              "2019-01-04  ...                  NaN  10672.250000          NaN          NaN   \n",
              "2019-01-07  ...                  NaN  10727.349609     10792.50          NaN   \n",
              "2019-01-08  ...                  NaN  10771.799805     10672.25          NaN   \n",
              "\n",
              "            Close_Lag_10  Rate_Change  Days_Since_Rate_Change  Rate_MA30  \\\n",
              "Date                                                                       \n",
              "2019-01-02           NaN          NaN                       0        NaN   \n",
              "2019-01-03           NaN          0.0                       1        NaN   \n",
              "2019-01-04           NaN          0.0                       2        NaN   \n",
              "2019-01-07           NaN          0.0                       3        NaN   \n",
              "2019-01-08           NaN          0.0                       4        NaN   \n",
              "\n",
              "            FX_MA30  target  \n",
              "Date                         \n",
              "2019-01-02      NaN       0  \n",
              "2019-01-03      NaN       1  \n",
              "2019-01-04      NaN       1  \n",
              "2019-01-07      NaN       1  \n",
              "2019-01-08      NaN       1  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa1d5a0a-11c1-4ff4-9f41-abbdefb03a32\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Price_vix</th>\n",
              "      <th>Interest_rate</th>\n",
              "      <th>Price_usd_inr</th>\n",
              "      <th>GARCH_Volatility</th>\n",
              "      <th>RSI</th>\n",
              "      <th>...</th>\n",
              "      <th>Hist_Volatility_30D</th>\n",
              "      <th>Close_Lag_1</th>\n",
              "      <th>Close_Lag_3</th>\n",
              "      <th>Close_Lag_5</th>\n",
              "      <th>Close_Lag_10</th>\n",
              "      <th>Rate_Change</th>\n",
              "      <th>Days_Since_Rate_Change</th>\n",
              "      <th>Rate_MA30</th>\n",
              "      <th>FX_MA30</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-02</th>\n",
              "      <td>10792.500000</td>\n",
              "      <td>10895.349609</td>\n",
              "      <td>10735.049805</td>\n",
              "      <td>10868.849609</td>\n",
              "      <td>309700</td>\n",
              "      <td>16.3875</td>\n",
              "      <td>6.5</td>\n",
              "      <td>71.435</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-03</th>\n",
              "      <td>10672.250000</td>\n",
              "      <td>10814.049805</td>\n",
              "      <td>10661.250000</td>\n",
              "      <td>10796.799805</td>\n",
              "      <td>286200</td>\n",
              "      <td>16.7900</td>\n",
              "      <td>6.5</td>\n",
              "      <td>71.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10792.500000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-04</th>\n",
              "      <td>10727.349609</td>\n",
              "      <td>10741.049805</td>\n",
              "      <td>10628.650391</td>\n",
              "      <td>10699.700195</td>\n",
              "      <td>296600</td>\n",
              "      <td>16.1625</td>\n",
              "      <td>6.5</td>\n",
              "      <td>69.205</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10672.250000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-07</th>\n",
              "      <td>10771.799805</td>\n",
              "      <td>10835.950195</td>\n",
              "      <td>10750.150391</td>\n",
              "      <td>10804.849609</td>\n",
              "      <td>269400</td>\n",
              "      <td>16.3025</td>\n",
              "      <td>6.5</td>\n",
              "      <td>68.885</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10727.349609</td>\n",
              "      <td>10792.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-08</th>\n",
              "      <td>10802.150391</td>\n",
              "      <td>10818.450195</td>\n",
              "      <td>10733.250000</td>\n",
              "      <td>10786.250000</td>\n",
              "      <td>277700</td>\n",
              "      <td>15.7000</td>\n",
              "      <td>6.5</td>\n",
              "      <td>69.017</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10771.799805</td>\n",
              "      <td>10672.25</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa1d5a0a-11c1-4ff4-9f41-abbdefb03a32')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aa1d5a0a-11c1-4ff4-9f41-abbdefb03a32 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aa1d5a0a-11c1-4ff4-9f41-abbdefb03a32');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-91bd3add-020b-4275-be57-63c45606a157\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91bd3add-020b-4275-be57-63c45606a157')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-91bd3add-020b-4275-be57-63c45606a157 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Tail before dropna:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                   Close          High           Low          Open  Volume  \\\n",
              "Date                                                                         \n",
              "2024-12-23  23753.449219  23869.550781  23647.199219  23738.199219  189800   \n",
              "2024-12-24  23727.650391  23867.650391  23685.150391  23769.099609  177700   \n",
              "2024-12-26  23750.199219  23854.500000  23653.599609  23775.800781  177700   \n",
              "2024-12-27  23813.400391  23938.849609  23800.599609  23801.400391  176800   \n",
              "2024-12-30  23644.900391  23915.349609  23599.300781  23796.900391  364900   \n",
              "\n",
              "            Price_vix  Interest_rate  Price_usd_inr  GARCH_Volatility  \\\n",
              "Date                                                                    \n",
              "2024-12-23    13.5200            6.5         85.095               NaN   \n",
              "2024-12-24    13.1775            6.5         85.176               NaN   \n",
              "2024-12-26    14.0350            6.5         85.254               NaN   \n",
              "2024-12-27    13.2375            6.5         85.388               NaN   \n",
              "2024-12-30    13.9725            6.5         85.474               NaN   \n",
              "\n",
              "                  RSI  ...  Hist_Volatility_30D   Close_Lag_1   Close_Lag_3  \\\n",
              "Date                   ...                                                    \n",
              "2024-12-23  32.759206  ...             0.896282  23587.500000  24198.849609   \n",
              "2024-12-24  32.011432  ...             0.895872  23753.449219  23951.699219   \n",
              "2024-12-26  23.932179  ...             0.896280  23727.650391  23587.500000   \n",
              "2024-12-27  26.893892  ...             0.876942  23750.199219  23753.449219   \n",
              "2024-12-30  25.404024  ...             0.849978  23813.400391  23727.650391   \n",
              "\n",
              "             Close_Lag_5  Close_Lag_10  Rate_Change  Days_Since_Rate_Change  \\\n",
              "Date                                                                          \n",
              "2024-12-23  24668.250000  24619.000000          0.0                     459   \n",
              "2024-12-24  24336.000000  24610.050781          0.0                     460   \n",
              "2024-12-26  24198.849609  24641.800781          0.0                     461   \n",
              "2024-12-27  23951.699219  24548.699219          0.0                     462   \n",
              "2024-12-30  23587.500000  24768.300781          0.0                     463   \n",
              "\n",
              "            Rate_MA30    FX_MA30  target  \n",
              "Date                                      \n",
              "2024-12-23        6.5  84.304733       0  \n",
              "2024-12-24        6.5  84.360367       1  \n",
              "2024-12-26        6.5  84.389533       1  \n",
              "2024-12-27        6.5  84.409300       0  \n",
              "2024-12-30        6.5  84.444567       0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ecdf76d-7b3d-4d32-bc12-14888cb241d4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Price_vix</th>\n",
              "      <th>Interest_rate</th>\n",
              "      <th>Price_usd_inr</th>\n",
              "      <th>GARCH_Volatility</th>\n",
              "      <th>RSI</th>\n",
              "      <th>...</th>\n",
              "      <th>Hist_Volatility_30D</th>\n",
              "      <th>Close_Lag_1</th>\n",
              "      <th>Close_Lag_3</th>\n",
              "      <th>Close_Lag_5</th>\n",
              "      <th>Close_Lag_10</th>\n",
              "      <th>Rate_Change</th>\n",
              "      <th>Days_Since_Rate_Change</th>\n",
              "      <th>Rate_MA30</th>\n",
              "      <th>FX_MA30</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-12-23</th>\n",
              "      <td>23753.449219</td>\n",
              "      <td>23869.550781</td>\n",
              "      <td>23647.199219</td>\n",
              "      <td>23738.199219</td>\n",
              "      <td>189800</td>\n",
              "      <td>13.5200</td>\n",
              "      <td>6.5</td>\n",
              "      <td>85.095</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32.759206</td>\n",
              "      <td>...</td>\n",
              "      <td>0.896282</td>\n",
              "      <td>23587.500000</td>\n",
              "      <td>24198.849609</td>\n",
              "      <td>24668.250000</td>\n",
              "      <td>24619.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>459</td>\n",
              "      <td>6.5</td>\n",
              "      <td>84.304733</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-24</th>\n",
              "      <td>23727.650391</td>\n",
              "      <td>23867.650391</td>\n",
              "      <td>23685.150391</td>\n",
              "      <td>23769.099609</td>\n",
              "      <td>177700</td>\n",
              "      <td>13.1775</td>\n",
              "      <td>6.5</td>\n",
              "      <td>85.176</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32.011432</td>\n",
              "      <td>...</td>\n",
              "      <td>0.895872</td>\n",
              "      <td>23753.449219</td>\n",
              "      <td>23951.699219</td>\n",
              "      <td>24336.000000</td>\n",
              "      <td>24610.050781</td>\n",
              "      <td>0.0</td>\n",
              "      <td>460</td>\n",
              "      <td>6.5</td>\n",
              "      <td>84.360367</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-26</th>\n",
              "      <td>23750.199219</td>\n",
              "      <td>23854.500000</td>\n",
              "      <td>23653.599609</td>\n",
              "      <td>23775.800781</td>\n",
              "      <td>177700</td>\n",
              "      <td>14.0350</td>\n",
              "      <td>6.5</td>\n",
              "      <td>85.254</td>\n",
              "      <td>NaN</td>\n",
              "      <td>23.932179</td>\n",
              "      <td>...</td>\n",
              "      <td>0.896280</td>\n",
              "      <td>23727.650391</td>\n",
              "      <td>23587.500000</td>\n",
              "      <td>24198.849609</td>\n",
              "      <td>24641.800781</td>\n",
              "      <td>0.0</td>\n",
              "      <td>461</td>\n",
              "      <td>6.5</td>\n",
              "      <td>84.389533</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-27</th>\n",
              "      <td>23813.400391</td>\n",
              "      <td>23938.849609</td>\n",
              "      <td>23800.599609</td>\n",
              "      <td>23801.400391</td>\n",
              "      <td>176800</td>\n",
              "      <td>13.2375</td>\n",
              "      <td>6.5</td>\n",
              "      <td>85.388</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.893892</td>\n",
              "      <td>...</td>\n",
              "      <td>0.876942</td>\n",
              "      <td>23750.199219</td>\n",
              "      <td>23753.449219</td>\n",
              "      <td>23951.699219</td>\n",
              "      <td>24548.699219</td>\n",
              "      <td>0.0</td>\n",
              "      <td>462</td>\n",
              "      <td>6.5</td>\n",
              "      <td>84.409300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-30</th>\n",
              "      <td>23644.900391</td>\n",
              "      <td>23915.349609</td>\n",
              "      <td>23599.300781</td>\n",
              "      <td>23796.900391</td>\n",
              "      <td>364900</td>\n",
              "      <td>13.9725</td>\n",
              "      <td>6.5</td>\n",
              "      <td>85.474</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25.404024</td>\n",
              "      <td>...</td>\n",
              "      <td>0.849978</td>\n",
              "      <td>23813.400391</td>\n",
              "      <td>23727.650391</td>\n",
              "      <td>23587.500000</td>\n",
              "      <td>24768.300781</td>\n",
              "      <td>0.0</td>\n",
              "      <td>463</td>\n",
              "      <td>6.5</td>\n",
              "      <td>84.444567</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ecdf76d-7b3d-4d32-bc12-14888cb241d4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8ecdf76d-7b3d-4d32-bc12-14888cb241d4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8ecdf76d-7b3d-4d32-bc12-14888cb241d4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-53d63f91-e63d-4dde-833b-a222767fcab0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53d63f91-e63d-4dde-833b-a222767fcab0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-53d63f91-e63d-4dde-833b-a222767fcab0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Shape after fillna: (1477, 26)\n",
            "Info after fillna:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 1477 entries, 2019-01-02 to 2024-12-30\n",
            "Data columns (total 26 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Close                   1477 non-null   float64\n",
            " 1   High                    1477 non-null   float64\n",
            " 2   Low                     1477 non-null   float64\n",
            " 3   Open                    1477 non-null   float64\n",
            " 4   Volume                  1477 non-null   int64  \n",
            " 5   Price_vix               1477 non-null   float64\n",
            " 6   Interest_rate           1477 non-null   float64\n",
            " 7   Price_usd_inr           1477 non-null   float64\n",
            " 8   GARCH_Volatility        0 non-null      float64\n",
            " 9   RSI                     1464 non-null   float64\n",
            " 10  MACD                    1477 non-null   float64\n",
            " 11  MACD_Signal             1477 non-null   float64\n",
            " 12  BB_Upper                1458 non-null   float64\n",
            " 13  BB_Lower                1458 non-null   float64\n",
            " 14  ATR                     1477 non-null   float64\n",
            " 15  FracDiff_Close          550 non-null    float64\n",
            " 16  Hist_Volatility_30D     1447 non-null   float64\n",
            " 17  Close_Lag_1             1476 non-null   float64\n",
            " 18  Close_Lag_3             1474 non-null   float64\n",
            " 19  Close_Lag_5             1472 non-null   float64\n",
            " 20  Close_Lag_10            1467 non-null   float64\n",
            " 21  Rate_Change             1476 non-null   float64\n",
            " 22  Days_Since_Rate_Change  1477 non-null   int64  \n",
            " 23  Rate_MA30               1448 non-null   float64\n",
            " 24  FX_MA30                 1448 non-null   float64\n",
            " 25  target                  1477 non-null   int64  \n",
            "dtypes: float64(23), int64(3)\n",
            "memory usage: 311.6 KB\n",
            "\n",
            "Step 3: Starting Optuna study to MAXIMIZE prediction accuracy...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/50 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5309933dbfb24131a30fb392f67fc776"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Optimization Complete ---\n",
            "Number of finished trials: 50\n",
            "\n",
            "Best trial average ACCURACY: 0.5520\n",
            "(Note: An accuracy of 0.50 is equivalent to a random coin flip)\n",
            "\n",
            "Best Hyperparameters Found:\n",
            "  n_estimators: 1600\n",
            "  learning_rate: 0.2066510273541633\n",
            "  max_depth: 8\n",
            "  subsample: 0.9803276305570842\n",
            "  colsample_bytree: 0.6019034693673762\n",
            "  gamma: 4.8125569119702\n"
          ]
        }
      ],
      "execution_count": 78,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "5309933dbfb24131a30fb392f67fc776",
            "2865d75b359d4d9cbc2faba70c6d2767",
            "044eb00409834617ab9d011f6fc78864",
            "efdeb7af9edd4404b0e86f2273861a68",
            "0db7fb0ee34e434291d47a2eadaf0e67",
            "aeb08e1cb44e4861a1dd0328621812ca",
            "34babf65f59a4888a8a466c6950fe0cb",
            "af23b5c06e094f88ab8f4e40b70564e1",
            "e3d019b5b7c04999bc5a27eb53866e00",
            "07b6e1f597424a34823dfaaff7d00985",
            "1305b8787cfb408a9bf9bbd110da5ca9"
          ]
        },
        "id": "q5LkvSC0I8WO",
        "outputId": "f5e98c13-3a1b-4082-fc8a-f2e498ece749"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "5309933dbfb24131a30fb392f67fc776": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2865d75b359d4d9cbc2faba70c6d2767",
              "IPY_MODEL_044eb00409834617ab9d011f6fc78864",
              "IPY_MODEL_efdeb7af9edd4404b0e86f2273861a68"
            ],
            "layout": "IPY_MODEL_0db7fb0ee34e434291d47a2eadaf0e67"
          }
        },
        "2865d75b359d4d9cbc2faba70c6d2767": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_aeb08e1cb44e4861a1dd0328621812ca",
            "placeholder": "​",
            "style": "IPY_MODEL_34babf65f59a4888a8a466c6950fe0cb",
            "value": "Best trial: 13. Best value: 0.552033: 100%"
          }
        },
        "044eb00409834617ab9d011f6fc78864": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_af23b5c06e094f88ab8f4e40b70564e1",
            "max": 50,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e3d019b5b7c04999bc5a27eb53866e00",
            "value": 50
          }
        },
        "efdeb7af9edd4404b0e86f2273861a68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_07b6e1f597424a34823dfaaff7d00985",
            "placeholder": "​",
            "style": "IPY_MODEL_1305b8787cfb408a9bf9bbd110da5ca9",
            "value": " 50/50 [05:38&lt;00:00,  6.89s/it]"
          }
        },
        "0db7fb0ee34e434291d47a2eadaf0e67": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "aeb08e1cb44e4861a1dd0328621812ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "34babf65f59a4888a8a466c6950fe0cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "af23b5c06e094f88ab8f4e40b70564e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e3d019b5b7c04999bc5a27eb53866e00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "07b6e1f597424a34823dfaaff7d00985": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1305b8787cfb408a9bf9bbd110da5ca9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
